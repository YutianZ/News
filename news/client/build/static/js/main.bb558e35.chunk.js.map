{"version":3,"sources":["NewsCard/NewsCard.js","NewsPanel/NewsPanel.js","App/App.js","serviceWorker.js","index.js","App/logo.png"],"names":["NewsCard","url","event","preventDefault","window","open","_this","this","react_default","a","createElement","className","onClick","e","redirectToUrl","props","news","src","urlToImage","alt","title","description","source","reason","time","React","Component","NewsPanel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","loadMoreNews","_","debounce","addEventListener","handleScroll","_this3","news_url","location","hostname","request","Request","method","fetch","then","res","json","setState","concat","scrollY","pageYOffset","document","documentElement","scrollTop","innerHeight","body","offsetHeight","news_list","map","key","digest","href","src_NewsCard_NewsCard","renderNews","id","App","logo","src_NewsPanel_NewsPanel","Boolean","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bb558e35.chunk.js","sourcesContent":["import './NewsCard.css';\n\nimport React from 'react';\n\nclass NewsCard extends React.Component{\n redirectToUrl(url, event) {\n   event.preventDefault();\n   window.open(url, '_blank');\n }\n\n render() {\n   return (\n    <div className=\"news-container\" onClick={(e) => this.redirectToUrl(this.props.news.url, e)}>\n        <div className='card-panel z-depth-3'>\n            <div className=\"row\">\n                <div className='col s4 fill'>\n                    <img src={this.props.news.urlToImage} alt='news'/>\n                </div>\n                <div className=\"col s1\"/>\n                    <div className=\"col s7\">\n                        <div className=\"news-intro-col\">\n                            <div className=\"news-intro-panel\">\n                                <h4>{this.props.news.title}</h4>\n                                <div className=\"news-description\">\n                                    <p>{this.props.news.description}</p>\n                                    <div>\n                                        {this.props.news.source != null && <div className='chip light-blue news-chip'>{this.props.news.source}</div>}\n                                        {this.props.news.reason != null && <div className='chip light-green news-chip'>{this.props.news.reason}</div>}\n                                        {this.props.news.time != null && <div className='chip amber news-chip'>{this.props.news.time}</div>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    </div>\n   );\n }\n}\n\nexport default NewsCard;","import React from 'react';\n//import './NewsPanel.css';\nimport _ from 'lodash';\nimport NewsCard from '../NewsCard/NewsCard';\nclass NewsPanel extends React.Component {\n    constructor() {\n        super();\n        this.state = {news: null};\n    }\n\n    componentDidMount() {\n        this.loadMoreNews();\n        this.loadMoreNews = _.debounce(this.loadMoreNews, 1000);\n        window.addEventListener('scroll', () => this.handleScroll());\n    }\n\n    loadMoreNews() {\n        //TODO: send real http request;\n        const news_url = 'http://' + window.location.hostname + ':3000/news';\n        const request= new Request(news_url, {method:'GET'});\n\n        fetch(request)\n            .then(res => res.json())\n            .then(news => {\n                this.setState({news: this.state.news ? this.state.news.concat(news) : news\n                })\n            })\n    }\n\n    handleScroll() {\n        //document.body.offsetHeight\n        //scrollY\n        //window.innerHeight\n        let scrollY = window.scrollY || window.pageYOffset || document.documentElement.scrollTop;\n        if(window.innerHeight + scrollY >= document.body.offsetHeight - 50) {\n            this.loadMoreNews();\n        }\n    }\n\n    renderNews() {\n        const news_list = this.state.news.map(news => {\n            return(\n                //every news has a special digest, use it as key\n                <a className='list-group-item' key={news.digest} href='#'>\n                    <NewsCard news={news}></NewsCard>\n                </a>\n            );\n        });\n        return(\n            <div className=\"container-fluid\">\n                <div className='list-group'>\n                    {news_list}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if(!this.state.news) {\n            return(\n                <div id='msg-app-loading'>\n                    loading...\n                </div>\n            );\n        } else {\n            return(\n                <div>\n                    {this.renderNews()}\n                </div>\n            );\n        }\n    }\n}\n\nexport default NewsPanel;","import 'materialize-css/dist/css/materialize.min.css';\nimport './App.css';\n\nimport React from 'react';\nimport logo from './logo.png';\nimport NewsPanel from '../NewsPanel/NewsPanel';\n\nclass App extends React.Component {\n    render() {\n        return(\n            <div>\n                <img className='logo' src={logo} alt='logo'></img>\n                <div className='container'>\n                    <NewsPanel></NewsPanel>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.f9ebcc13.png\";"],"sourceRoot":""}